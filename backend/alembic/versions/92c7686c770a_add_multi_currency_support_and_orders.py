"""add_multi_currency_support_and_orders

Revision ID: 92c7686c770a
Revises: 94404b2e4890
Create Date: 2025-09-23 16:19:13.517352

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '92c7686c770a'
down_revision: Union[str, Sequence[str], None] = '94404b2e4890'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exchange_rates_latest',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base_currency', sqlmodel.sql.sqltypes.AutoString(length=3), nullable=False),
    sa.Column('target_currency', sqlmodel.sql.sqltypes.AutoString(length=3), nullable=False),
    sa.Column('rate', sa.Numeric(precision=20, scale=10), nullable=False),
    sa.Column('fetched_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exchange_rates_latest_base_currency'), 'exchange_rates_latest', ['base_currency'], unique=False)
    op.create_index(op.f('ix_exchange_rates_latest_target_currency'), 'exchange_rates_latest', ['target_currency'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(length=3), nullable=False),
    sa.Column('total_amount_minor', sa.Integer(), nullable=False),
    sa.Column('total_usd_minor', sa.Integer(), nullable=False),
    sa.Column('fx_rate_decimal', sa.Numeric(precision=20, scale=10), nullable=True),
    sa.Column('fx_provider', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('fx_timestamp', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_user_id'), 'orders', ['user_id'], unique=False)
    op.create_table('order_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price_amount_minor', sa.Integer(), nullable=False),
    sa.Column('unit_price_currency', sqlmodel.sql.sqltypes.AutoString(length=3), nullable=False),
    sa.Column('subtotal_amount_minor', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_items_order_id'), 'order_items', ['order_id'], unique=False)
    op.create_index(op.f('ix_order_items_product_id'), 'order_items', ['product_id'], unique=False)
    op.add_column('delivery_options', sa.Column('price_amount_minor', sa.Integer(), nullable=True))
    op.add_column('delivery_options', sa.Column('price_currency', sqlmodel.sql.sqltypes.AutoString(length=3), nullable=True))  # Make nullable first
    op.add_column('delivery_options', sa.Column('min_order_amount_minor', sa.Integer(), nullable=True))
    op.add_column('products', sa.Column('price_amount_minor', sa.Integer(), nullable=True))
    op.add_column('products', sa.Column('price_currency', sqlmodel.sql.sqltypes.AutoString(length=3), nullable=True))  # Make nullable first
    
    # Backfill existing data
    print("Backfilling existing product price data...")
    connection = op.get_bind()
    
    # Update products: convert existing price to minor units (cents) and set currency to USD
    connection.execute(
        sa.text("""
            UPDATE products 
            SET price_amount_minor = CAST(price * 100 AS INTEGER),
                price_currency = 'USD'
            WHERE price_amount_minor IS NULL
        """)
    )
    
    # Update delivery options: convert existing price to minor units and set currency to USD
    connection.execute(
        sa.text("""
            UPDATE delivery_options 
            SET price_amount_minor = CAST(price * 100 AS INTEGER),
                price_currency = 'USD',
                min_order_amount_minor = CASE 
                    WHEN min_order_amount IS NOT NULL 
                    THEN CAST(min_order_amount * 100 AS INTEGER)
                    ELSE NULL 
                END
            WHERE price_amount_minor IS NULL
        """)
    )
    
    print("Data backfill completed!")
    
    # Now make the columns NOT NULL since they have been backfilled
    op.alter_column('products', 'price_currency', nullable=False)
    op.alter_column('delivery_options', 'price_currency', nullable=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('products', 'price_currency')
    op.drop_column('products', 'price_amount_minor')
    op.drop_column('delivery_options', 'min_order_amount_minor')
    op.drop_column('delivery_options', 'price_currency')
    op.drop_column('delivery_options', 'price_amount_minor')
    op.drop_index(op.f('ix_order_items_product_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_order_id'), table_name='order_items')
    op.drop_table('order_items')
    op.drop_index(op.f('ix_orders_user_id'), table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_exchange_rates_latest_target_currency'), table_name='exchange_rates_latest')
    op.drop_index(op.f('ix_exchange_rates_latest_base_currency'), table_name='exchange_rates_latest')
    op.drop_table('exchange_rates_latest')
    # ### end Alembic commands ###
